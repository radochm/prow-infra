prowjob_namespace: prow
pod_namespace: test-pods
log_level: debug

in_repo_config:
  enabled:
    radochm/prow-infra: true
    radochm/build-test: true
    radochm/tesing_ground: true
    radochm/kpt-backstage-plugins: true
  allowed_clusters:
    "*": ["default"]

deck:
 spyglass:
   lenses:
   - lens:
       name: metadata
     required_files:
     - started.json|finished.json
   - lens:
       config:
       name: buildlog
     required_files:
     - build-log.txt
   - lens:
       name: junit
     required_files:
     - .*/junit.*\.xml
   - lens:
       name: podinfo
     required_files:
     - podinfo.json
   - lens:
       name: artifacts
     required_files:
     - ^artifacts/.*$

plank:
  job_url_prefix_config:
    "*": https://prow.nephew.io/view/
  report_templates:
    '*': >-
        [Full PR test history](https://prow.nephew.io/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}).
        [Your PR dashboard](https://prow.nephew.io/pr?query=is:pr+state:open+author:{{with
        index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).
  default_decoration_configs:
    "*":
      gcs_configuration:
        bucket: s3://prow-logs
        path_strategy: explicit
      s3_credentials_secret: s3-credentials
      utility_images:
        clonerefs: gcr.io/k8s-prow/clonerefs:v20230322-fad14aa00d
        entrypoint: gcr.io/k8s-prow/entrypoint:v20230322-fad14aa00d
        initupload: gcr.io/k8s-prow/initupload:v20230322-fad14aa00d
        sidecar: gcr.io/k8s-prow/sidecar:v20230322-fad14aa00d
#XXX
tide:
  queries:
  - labels:
    - lgtm
    - approved
    missingLabels:
    - needs-rebase
    - do-not-merge/hold
    - do-not-merge/work-in-progress
    - do-not-merge/invalid-owners-file
    orgs:
    - radochm
  blocker_label: merge-blocker
  squash_label: merge-method-squash
  rebase_label: merge-method-rebase
  merge_label: merge-method-merge
  merge_method:
    radochm/build-test: squash

decorate_all_jobs: true

branch-protection:
  orgs:
    radochm:
      repos:
        build-test:
          protect: true
          restrictions:
            teams:
          required_status_checks:
            contexts:

presubmits:
  radochm/build-test:
  - name: pre-test-infra-validate-job
    annotations:
    labels:
    run_if_changed: '.prow.yaml|.prow/'
    skip_report: false
    decorate: true
    cluster: default
    extra_refs:
      - org: radochm
        repo: prow-infra
        path_alias: github.com/radochm/prow-infra
        base_ref: main
    spec:
      containers:
        - image: "gcr.io/k8s-prow/checkconfig:v20230322-fad14aa00d"
          command:
            - "checkconfig"
          args:
            - "--plugin-config=../prow-infra/config/prow/plugins.yaml"
            - "--config-path=../prow-infra/config/prow/config.yaml"
            - "--prow-yaml-repo-name=$(REPO_OWNER)/$(REPO_NAME)"
postsubmits:
  radochm/build-test:
  - name: build-push-image-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 1
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD} \
            --dockerfile=Dockerfile --destination=radoslawc/nmath:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json

  radochm/kpt-backstage-plugins:
  - name: build-push-kpt-image-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 1
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD} \
            --dockerfile=Dockerfile --destination=radoslawc/kpt-backstage-plugins:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json




  radochm/nephio:
  - name: build-push-image-interface-fn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/interface-fn \
            --dockerfile=Dockerfile --destination=radoslawc/interface-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-interface-fn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/interface-fn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/interface-fn \
            --dockerfile=Dockerfile --destination=radoslawc/interface-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-ipam-fn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/ipam-fn \
            --dockerfile=Dockerfile --destination=radoslawc/ipam-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-ipam-fn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/ipam-fn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/ipam-fn \
            --dockerfile=Dockerfile --destination=radoslawc/ipam-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-nad-fn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nad-fn \
            --dockerfile=DockerFile --destination=radoslawc/nad-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-nad-fn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/nad-fn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nad-fn \
            --dockerfile=DockerFile --destination=radoslawc/nad-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-amfdeployfn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=amfdeployfn/Dockerfile --destination=radoslawc/amf-deploy-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-amfdeployfn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/nfdeploy-fn/amfdeployfn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=amfdeployfn/Dockerfile --destination=radoslawc/amf-deploy-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-smfdeployfn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=smfdeployfn/Dockerfile --destination=radoslawc/smf-deploy-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-smfdeployfn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/nfdeploy-fn/smfdeployfn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=smfdeployfn/Dockerfile --destination=radoslawc/smf-deploy-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-upfdeployfn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=upfdeployfn/Dockerfile --destination=radoslawc/upf-deploy-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-upfdeployfn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/nfdeploy-fn/upfdeployfn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/nfdeploy-fn/ \
            --dockerfile=upfdeployfn/Dockerfile --destination=radoslawc/upf-deploy-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json


  - name: build-push-image-vlan-fn-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/vlan-fn \
            --dockerfile=Dockerfile --destination=radoslawc/vlan-fn:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-vlan-fn-commit-conf
    cluster: default
    run_if_changed: 'krm-functions/vlan-fn/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/krm-functions/vlan-fn \
            --dockerfile=Dockerfile --destination=radoslawc/vlan-fn:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json

  - name: build-push-image-spec-operator-release-conf
    cluster: default
    always_run: true
    branches:
    - "^v.*$"
    annotations:
      description: Build and Push Image to DockerHub when release tag is created
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/controllers/specializer-operator \
            --dockerfile=Dockerfile --destination=radoslawc/specializer-operator:${PULL_BASE_REF}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
  - name: build-push-image-spec-operator-commit-conf
    cluster: default
    run_if_changed: 'controllers/specializer-operator/.*'
    branches:
    - "main"
    annotations:
      description: Build and Push Image to DockerHub every commit
    decorate: true
    decoration_config:
      censor_secrets: true
    max_concurrency: 0
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - "/bin/sh"
        - "-c"
        - |
          executor --context=${PWD}/controllers/specializer-operator \
            --dockerfile=Dockerfile --destination=radoslawc/specializer-operator:${BUILD_ID}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
        resources:
          requests:
            cpu: 2
            memory: 2Gi
      volumes:
        - name: kaniko-secret
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json






periodics:
- cron: "0 0 1 1 *"
  name: infra-branchprotector
  cluster: default
  labels:
    app: branchprotector
  decorate: true
  decoration_config:
    timeout: 5h
  extra_refs:
  - org: radochm
    repo: prow-infra
    base_ref: main
  spec:
    containers:
    - name: branchprotector
      image: gcr.io/k8s-prow/branchprotector:v20230322-fad14aa00d
      command:
      - branchprotector
      args:
      - --config-path=../prow-infra/config/prow/config.yaml
      - --github-token-path=/etc/github/cert
      - --confirm
      - --github-endpoint=http://ghproxy.default.svc.cluster.local
      - --github-endpoint=https://api.github.com
      volumeMounts:
      - name: github-token
        mountPath: /etc/github
        readOnly: true
    volumes:
    - name: github-token
      secret:
        secretName: github-token
  annotations:
    description: Runs Prow's branchprotector to apply configured GitHub status context requirements and merge policies.
